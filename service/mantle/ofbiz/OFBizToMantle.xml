<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="import" noun="OFBizData" transaction="ignore">
        <!-- in Tools run service 'mantle.ofbiz.OFBizToMantle.import#OFBizData' -->
        <in-parameters>
            <parameter name="directoryLocation" required="true"/>
        </in-parameters>
        <actions><script><![CDATA[
            import mantle.ofbiz.OFBizTransform
            import org.moqui.Moqui
            import org.moqui.context.ExecutionContext
            import org.moqui.impl.context.ArtifactExecutionFacadeImpl
            import org.moqui.impl.context.ExecutionContextFactoryImpl
            import org.moqui.impl.context.ExecutionContextImpl
            import org.moqui.etl.FlatXmlExtractor
            import org.moqui.etl.SimpleEtl
            import org.moqui.resource.ResourceReference
            import org.slf4j.Logger
            import org.slf4j.LoggerFactory

            boolean runParallel = true

            Logger logger = LoggerFactory.getLogger('OFBizToMantle.importOFBizData')
            ExecutionContext ec = context.ec
            ResourceReference dirRef = ec.resource.getLocationReference(directoryLocation)
            long startTime = System.currentTimeMillis()
            EtlInfo etlInfo = new EtlInfo()

            for (List<String> nameList in OFBizTransform.loadOrderParallel) {
                logger.info("=== ETL Starting parallel set ${nameList}")

                List<Thread> threadList = []
                for (String entityName in nameList) {
                    ResourceReference fileRef = dirRef.getChild(entityName + '.xml')
                    if (!fileRef.exists) {
                        logger.warn("File for entity ${entityName} not found at: ${fileRef.getLocation()}")
                        continue
                    }
                    Thread curThread = startEtl(entityName, fileRef, etlInfo)
                    threadList.add(curThread)
                    if (!runParallel) curThread.join()
                }
                if (runParallel) for (Thread thread in threadList) thread.join()

                logger.info("=== ETL Finished parallel set ${nameList}")
                if (etlInfo.stopAll) {
                    logger.warn("Got a stop all from an error, stopping")
                    break
                }
            }

            OFBizTransform.clearMappingCaches()
            logger.info("=== ETL Finished Load of ${etlInfo.entityCount} entities in ${(System.currentTimeMillis() - startTime) / 1000}s (extracted: ${etlInfo.extractCount}, skipped: ${etlInfo.skipCount}, loaded: ${etlInfo.loadCount})")


            class EtlInfo {
                int extractCount = 0, skipCount = 0, loadCount = 0, entityCount = 0
                boolean stopAll = false
            }

            Thread startEtl(String entityName, ResourceReference fileRef, EtlInfo etlInfo) {
                SimpleEtl.Extractor extractor = new FlatXmlExtractor(fileRef)
                SimpleEtl.Loader loader = ec.entity.makeEtlLoader().useTryInsert() // .dummyFks()
                SimpleEtl etl = new SimpleEtl(extractor, loader).setConfiguration(OFBizTransform.conf).stopOnError()

                ExecutionContextImpl.ThreadPoolRunnable runnable = new ExecutionContextImpl.ThreadPoolRunnable((ExecutionContextFactoryImpl) ec.factory, {
                    ArtifactExecutionFacadeImpl ae = (ArtifactExecutionFacadeImpl) Moqui.executionContext.getArtifactExecution()
                    ae.disableAuthz(); ae.disableEntityEca(); ae.disableEntityDataFeed()

                    etl.process()
                    if (etl.hasError()) {
                        logger.error("Error loading ${entityName}", etl.singleErrorCause)
                        etlInfo.stopAll = true
                    } else {
                        logger.info("Loaded ${entityName} in ${etl.runTime}ms (extracted: ${etl.extractCount}, skipped: ${etl.skipCount}, loaded: ${etl.loadCount})")
                        etlInfo.extractCount += etl.extractCount; etlInfo.skipCount += etl.skipCount;
                        etlInfo.loadCount += etl.loadCount
                        etlInfo.entityCount++
                    }
                })

                Thread thread = new Thread(runnable)
                thread.start()
                return thread
            }
            ]]></script></actions>
    </service>
</services>
